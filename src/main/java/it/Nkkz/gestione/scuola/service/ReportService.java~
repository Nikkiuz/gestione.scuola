package it.Nkkz.gestione.scuola.service;

import it.Nkkz.gestione.scuola.dto.ReportDTO;
import it.Nkkz.gestione.scuola.entity.Corso;
import it.Nkkz.gestione.scuola.repository.CorsoRepository;
import it.Nkkz.gestione.scuola.repository.PagamentoRepository;
import it.Nkkz.gestione.scuola.repository.SpesaRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import java.time.LocalDate;
import java.time.YearMonth;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

@Service
public class ReportService {

	@Autowired
	private CorsoRepository corsoRepository;

	@Autowired
	private PagamentoRepository pagamentoRepository;

	@Autowired
	private SpesaRepository spesaRepository;

	@Autowired
	private EmailService emailService;

	@Autowired
	private PdfReportService pdfReportService;

	@Value("${spring.mail.username}")
	private String adminEmail;

	// ðŸ”¹ Genera il report mensile per un mese specifico
	public ReportDTO generaReportMensile(int anno, int mese) {
		YearMonth yearMonth = YearMonth.of(anno, mese);
		LocalDate startDate = yearMonth.atDay(1);
		LocalDate endDate = yearMonth.atEndOfMonth();

		return generaReport(startDate, endDate, "Mensile");
	}

	// ðŸ”¹ Genera il report annuale per un anno specifico
	public ReportDTO generaReportAnnuale(int anno) {
		LocalDate startDate = LocalDate.of(anno, 1, 1);
		LocalDate endDate = LocalDate.of(anno, 12, 31);

		return generaReport(startDate, endDate, "Annuale");
	}

	// ðŸ”¹ Metodo generico per generare un report
	private ReportDTO generaReport(LocalDate startDate, LocalDate endDate, String periodo) {
		ReportDTO report = new ReportDTO();
		report.setPeriodo(periodo);

		// ðŸ”¹ Ore insegnate per insegnante
		Map<String, Integer> oreInsegnate = corsoRepository.findByAttivoTrue().stream()
			.filter(corso -> startDate.getDayOfWeek().toString().equalsIgnoreCase(corso.getGiorno()))
			.collect(Collectors.groupingBy(
				c -> c.getInsegnante().getNome() + " " + c.getInsegnante().getCognome(),
				Collectors.summingInt(c -> c.getFrequenza().equals("2 volte a settimana") ? 6 : 3)
			));
		report.setOreInsegnate(oreInsegnate);

		// ðŸ”¹ Totale pagamenti ricevuti per metodo di pagamento
		Map<String, Double> pagamentiRicevuti = pagamentoRepository.findByDataPagamentoBetween(startDate, endDate).stream()
			.collect(Collectors.groupingBy(
				p -> p.getMetodoPagamento().toString(),
				Collectors.summingDouble(p -> p.getImporto())
			));
		report.setPagamentiRicevuti(pagamentiRicevuti);

		// ðŸ”¹ Totale spese registrate per categoria
		Map<String, Double> speseRegistrate = spesaRepository.findByDataSpesaBetween(startDate, endDate).stream()
			.collect(Collectors.groupingBy(
				s -> s.getCategoria().toString(),
				Collectors.summingDouble(s -> s.getImporto())
			));
		report.setSpeseRegistrate(speseRegistrate);

		// ðŸ”¹ Calcolo bilancio (entrate - uscite)
		report.setBilancio(
			pagamentiRicevuti.values().stream().mapToDouble(Double::doubleValue).sum()
				- speseRegistrate.values().stream().mapToDouble(Double::doubleValue).sum()
		);

		return report;
	}
}
